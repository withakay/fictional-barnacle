name: "Generate next version"
description: |
  Calculates the next version based on commit messages, PR titles, and existing tags with support for CalVer and SemVer.
  Can bump Major, Minor, or Patch based on commit messages and PR titles using conventional commit style semantics.
  See the README for more details.
inputs:
  use-calver:
    required: false
    type: string
    default: "false"
    description: |
      Use Calendar Versioning (YYMM.Minor.Patch) instead of Semantic Versioning (Major.Minor.Patch).
  semver-major:
    required: false
    type: string
    default: "0"
    description: |
      Initial major version for SemVer mode (only used if use-calver is false and no version tags already exist).
  add-meta:
    required: false
    type: string
    default: "false"
    description: |
      Whether to add metadata to the version (true/false).
      Typically used for PR based development releases.
      Metadata includes PR number, run number, commit hash, and JIRA ticket.
  version-suffix:
    required: false
    type: string
    default: ""
    description: |
      Optional suffix to add after version number but before other metadata.
      Requires add-meta to be true to take effect.
      Commonly used for pre-release versions (e.g., alpha, beta, rc1, etc.)
      For example, if the suffix is "alpha" and the PR number is 123, the version will start with "v1.0.1-alpha-pr123"
  jira-prefix:
    required: false
    type: string
    default: ""
    description: |
      Optional JIRA project prefix (e.g., MK, FX, AB).
      Used to extract JIRA ticket from PR title.
      Requires add-meta to be true to take effect.
      For example, if the prefix is FX, the ticket will be extracted from a PR title like "FX-123: Fix bug"
      and added to the version metadata as "fx123", e.g., "v1.0.1-fx123-pr123.1-hash123"
  alternate-pr-prefixes:
    required: false
    type: string
    default: "fix,hotfix,chore,feat,refactor,docs,style,ci"
    description: |
      Optional comma-separated list of alternate PR title prefixes to recognize.
      Requires add-meta to be true to take effect.
      Defaults to conventional commit style prefixes e.g., fix,feat,chore
outputs:
  version:
    description: "The new version number calculated based on commit messages, PR titles, and existing tags."
    value: ${{ steps.version.outputs.version }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Make script executable
      shell: bash
      run: chmod +x ${{ github.action_path }}/generate-version.sh

    - name: Generate next version
      id: version
      shell: bash
      run: |
        # Call the external script with all inputs
        version=$(${{ github.action_path }}/generate-version.sh \
          "${{ inputs.version-number }}" \
          "${{ inputs.version-suffix }}" \
          "${{ inputs.add-meta }}" \
          "${{ inputs.jira-prefix }}" \
          "${{ inputs.alternate-pr-prefixes }}" \
          "${{ inputs.use-calver }}" \
          "${{ inputs.semver-major }}" \
          "$GITHUB_REF" \
          "$GITHUB_SHA" \
          "$GITHUB_RUN_NUMBER" \
          "$GITHUB_EVENT_PATH" \
        )

        echo "New version: $version"
        echo "version=$version" >> $GITHUB_OUTPUT
